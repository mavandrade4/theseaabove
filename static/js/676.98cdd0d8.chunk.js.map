{"version":3,"file":"static/js/676.98cdd0d8.chunk.js","mappings":"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","sources":["pages/Context.js","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"../App.css\";\r\nimport { gsap } from \"gsap\";\r\nimport { ScrollToPlugin, ScrollTrigger, Observer } from \"gsap/all\";\r\nimport LoadingScreen from \"./components/LoadingScreen\";\r\nimport Footer from \"./components/Footer\";\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\ngsap.registerPlugin(ScrollToPlugin, ScrollTrigger, Observer);\r\n\r\nconst TextFrame = ({ children }) => {\r\n  const [ref, inView] = useInView({\r\n    threshold: 0.1,\r\n    triggerOnce: true\r\n  });\r\n\r\n  return (\r\n    <div \r\n      ref={ref}\r\n      className={`text-frame ${inView ? \"animate-in\" : \"\"}`}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Context = () => {\r\n  const sectionsRef = useRef([]);\r\n  const footerRef = useRef(null);\r\n  const currentIndex = useRef(0);\r\n  const [activeIndex, setActiveIndex] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const [isScrolling, setIsScrolling] = useState(false);\r\n  const contentRef = useRef(null);\r\n  const [titleImageLoaded, setTitleImageLoaded] = useState(false);\r\n\r\n  const scrollToSection = (index) => {\r\n    if (isScrolling) return;\r\n    setIsScrolling(true);\r\n\r\n    const target =\r\n      index < sectionsRef.current.length\r\n        ? sectionsRef.current[index]\r\n        : footerRef.current;\r\n\r\n    if (!target) return;\r\n\r\n    if (isMobile) {\r\n      window.scrollTo({\r\n        top: target.offsetTop,\r\n        behavior: \"smooth\",\r\n      });\r\n      currentIndex.current = index;\r\n      setActiveIndex(index);\r\n      setIsScrolling(false);\r\n    } else {\r\n      gsap.to(window, {\r\n        scrollTo: { y: target, autoKill: false, offsetY: 0 },\r\n        duration: 1.2,\r\n        ease: \"power3.out\",\r\n        onComplete: () => {\r\n          currentIndex.current = index;\r\n          setActiveIndex(index);\r\n          setIsScrolling(false);\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const checkIfMobile = () => {\r\n      setIsMobile(window.innerWidth <= 768);\r\n    };\r\n\r\n    checkIfMobile();\r\n    window.addEventListener(\"resize\", checkIfMobile);\r\n\r\n    const setVh = () => {\r\n      const vh = window.innerHeight * 0.01;\r\n      document.documentElement.style.setProperty(\"--vh\", `${vh}px`);\r\n    };\r\n    setVh();\r\n    window.addEventListener(\"resize\", setVh);\r\n\r\n    const timer = setTimeout(() => setIsLoading(false), 1000);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n      window.removeEventListener(\"resize\", checkIfMobile);\r\n      window.removeEventListener(\"resize\", setVh);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isLoading) {\r\n      if (!isMobile) {\r\n        const sections = sectionsRef.current;\r\n\r\n        const observer = Observer.create({\r\n          target: window,\r\n          type: \"wheel,touch\",\r\n          onDown: () => {\r\n            const atFooter =\r\n              window.innerHeight + window.scrollY >=\r\n              document.body.offsetHeight - 100;\r\n            if (!atFooter && currentIndex.current < sections.length) {\r\n              scrollToSection(currentIndex.current + 1);\r\n            }\r\n          },\r\n          onUp: () => {\r\n            if (currentIndex.current > 0) {\r\n              scrollToSection(currentIndex.current - 1);\r\n            }\r\n          },\r\n          wheelSpeed: 1,\r\n          tolerance: 15,\r\n          preventDefault: true,\r\n        });\r\n\r\n        sections.forEach((section, i) => {\r\n          ScrollTrigger.create({\r\n            trigger: section,\r\n            start: \"top center\",\r\n            end: \"bottom center\",\r\n            onEnter: () => {\r\n              setActiveIndex(i);\r\n              currentIndex.current = i;\r\n            },\r\n            onEnterBack: () => {\r\n              setActiveIndex(i);\r\n              currentIndex.current = i;\r\n            },\r\n          });\r\n        });\r\n\r\n        ScrollTrigger.create({\r\n          trigger: footerRef.current,\r\n          start: \"top bottom-=100\",\r\n          onEnter: () => {\r\n            setActiveIndex(sections.length);\r\n            currentIndex.current = sections.length;\r\n          },\r\n          onEnterBack: () => {\r\n            setActiveIndex(sections.length - 1);\r\n            currentIndex.current = sections.length - 1;\r\n          },\r\n        });\r\n\r\n        return () => {\r\n          observer.kill();\r\n          ScrollTrigger.getAll().forEach((instance) => instance.kill());\r\n        };\r\n      } else {\r\n        const handleScroll = () => {\r\n          const scrollPosition = window.scrollY;\r\n          let newActiveIndex = 0;\r\n\r\n          sectionsRef.current.forEach((section, index) => {\r\n            if (section) {\r\n              const sectionTop = section.offsetTop;\r\n              const sectionHeight = section.offsetHeight;\r\n              if (\r\n                scrollPosition >= sectionTop - window.innerHeight / 2 &&\r\n                scrollPosition <\r\n                  sectionTop + sectionHeight - window.innerHeight / 2\r\n              ) {\r\n                newActiveIndex = index;\r\n              }\r\n            }\r\n          });\r\n\r\n          setActiveIndex(newActiveIndex);\r\n          currentIndex.current = newActiveIndex;\r\n        };\r\n\r\n        window.addEventListener(\"scroll\", handleScroll);\r\n        return () => window.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    }\r\n  }, [isLoading, isMobile]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      gsap.killTweensOf(window);\r\n      ScrollTrigger.getAll().forEach((st) => st.kill());\r\n    };\r\n  }, []);\r\n\r\n  if (isLoading) return <LoadingScreen />;\r\n\r\n  return (\r\n    <div className=\"App\" ref={contentRef}>\r\n      <div className=\"dot-nav\">\r\n        {[0, 1, 2, 3, 4].map((i) => (\r\n          <button\r\n            key={i}\r\n            className={`dot ${activeIndex === i ? \"active\" : \"\"}`}\r\n            onClick={() => scrollToSection(i)}\r\n            aria-label={`Go to section ${i + 1}`}\r\n          >\r\n            <span className=\"dot-label\"></span>\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <section\r\n        className=\"hero-section\"\r\n        ref={(el) => (sectionsRef.current[0] = el)}\r\n      >\r\n        <div className=\"hero-content\">\r\n          <div className=\"title-deco\">\r\n            <img\r\n              src={process.env.PUBLIC_URL + \"/title.svg\"}\r\n              className=\"title-img\"\r\n              alt=\"The Sea Above Project\"\r\n            />\r\n            <h1 className=\"hero-title\">\r\n              <span className=\"title-accent\">CONTEXT:</span> <br />\r\n              Why Space Pollution Matters\r\n            </h1>\r\n          </div>\r\n          <p className=\"hero-subtitle\">\r\n            Understanding the growing threat of orbital debris and humanity's\r\n            response\r\n          </p>\r\n        </div>\r\n        <div className=\"scroll-prompt\">\r\n          <p>Scroll to explore</p>\r\n          <div className=\"scroll-arrow\"></div>\r\n        </div>\r\n      </section>\r\n\r\n      <section\r\n        className=\"frame content-section\"\r\n        ref={(el) => (sectionsRef.current[1] = el)}\r\n        style={{\r\n          background:\r\n            \"linear-gradient(135deg, --var(--bg-dark) 0%, #141414 100%)\",\r\n        }}\r\n      >\r\n        <div className=\"section-container\">\r\n          <div className=\"section-header\">\r\n            <h1>THE CURRENT SITUATION</h1>\r\n            <div className=\"section-number\">01</div>\r\n          </div>\r\n          <div className=\"text-container\">\r\n            <TextFrame>\r\n              <p>\r\n                Space has become an essential part of our daily lives. From{\" \"}\r\n                <b className=\"highlight\">GPS</b> and\r\n                <b className=\"highlight\"> internet</b> to{\" \"}\r\n                <b className=\"highlight\">climate monitoring</b> and{\" \"}\r\n                <b className=\"highlight\">disaster response</b>, satellites\r\n                orbiting Earth help power the modern world.\r\n              </p>\r\n\r\n              <p>\r\n                However, over the last decade, the amount of debris orbiting\r\n                Earth has skyrocketed - as of September 2024, there were more\r\n                than{\" \"}\r\n                <b className=\"highlight\">10,200 active satellites in space</b>,\r\n                and over <b className=\"highlight\">13,000 tonnes</b> of objects\r\n                orbiting our planet.\r\n              </p>\r\n            </TextFrame>\r\n            <TextFrame>\r\n              <p>\r\n                This growing cloud of clutter poses real risks. Fortunately, new\r\n                technologies are being developed to clean up the mess, and\r\n                international regulations are starting to catch up.\r\n              </p>\r\n            </TextFrame>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section\r\n        className=\"frame content-section\"\r\n        ref={(el) => (sectionsRef.current[2] = el)}\r\n        style={{\r\n          background: \"linear-gradient(135deg, #0a0a0a 0%, #141414 100%)\",\r\n        }}\r\n      >\r\n        <div className=\"section-container\">\r\n          <div className=\"section-header\">\r\n            <h1>HOW WE GOT HERE</h1>\r\n            <div className=\"section-number\">02</div>\r\n          </div>\r\n          <div className=\"text-container\">\r\n            <TextFrame>\r\n              <p>\r\n                When the first satellite,{\" \"}\r\n                <b className=\"highlight\">Sputnik 1, launched in 1957</b>, it\r\n                opened the door to the space age. Since then, we've sent\r\n                thousands of satellites into orbit, but we haven't been great\r\n                about cleaning up after ourselves.\r\n              </p>\r\n              <p>\r\n                In 2010, NASA scientist{\" \"}\r\n                <b className=\"highlight\">Donald Kessler</b> warned of a\r\n                dangerous chain reaction: as debris collides, it creates more\r\n                debris, increasing the chance of even more collisions. This\r\n                nightmare scenario known as the{\" \"}\r\n                <b className=\"highlight\">Kessler Syndrome</b> is no longer just\r\n                a theory.\r\n              </p>\r\n            </TextFrame>\r\n\r\n            <TextFrame>\r\n              <p>\r\n                By 2024, we had already seen more than 650 collisions,\r\n                explosions, or abnormal events in orbit. Every new piece of junk\r\n                puts important systems at risk{\" \"}\r\n                <b className=\"highlight\">\r\n                  like communications, weather forecasts, and even emergency\r\n                  services\r\n                </b>\r\n                .\r\n              </p>\r\n            </TextFrame>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section\r\n        className=\"frame content-section\"\r\n        ref={(el) => (sectionsRef.current[3] = el)}\r\n        style={{\r\n          background: \"linear-gradient(135deg, #0a0a0a 0%, #141414 100%)\",\r\n        }}\r\n      >\r\n        <div className=\"section-container\">\r\n          <div className=\"section-header\">\r\n            <h1>CLEANING UP</h1>\r\n            <div className=\"section-number\">03</div>\r\n          </div>\r\n          <div className=\"text-container\">\r\n            <TextFrame>\r\n              <p>\r\n                Thankfully, we're not just standing by. Around the world,\r\n                several creative and high-tech solutions are being developed to\r\n                fight space debris.\r\n              </p>\r\n              <p>\r\n                One method involves{\" \"}\r\n                <b className=\"highlight\">controlled re-entry</b> which ensures\r\n                large debris is safely directed back into Earth's atmosphere to\r\n                disintegrate. Missions like RemoveDEBRIS use{\" \"}\r\n                <b className=\"highlight\">\r\n                  physical tools, like nets and harpoons,\r\n                </b>\r\n                and these technologies have already started undergoing testing\r\n                to intercept space junk in orbit.\r\n              </p>\r\n            </TextFrame>\r\n\r\n            <TextFrame>\r\n              <p>\r\n                More recently, engineers have explored the use of{\" \"}\r\n                <b className=\"highlight\">magnetic systems</b>, where satellites\r\n                equipped with magnets can attach to old hardware and pull it out\r\n                of orbit. These innovations show that\r\n                <b className=\"highlight\">\r\n                  {\" \"}\r\n                  cleaning up space is not only possible, it's already happening\r\n                </b>\r\n                . The next step is scaling these efforts to meet the growing\r\n                challenge.\r\n              </p>\r\n            </TextFrame>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section\r\n        className=\"frame content-section\"\r\n        ref={(el) => (sectionsRef.current[4] = el)}\r\n        style={{\r\n          background: \"linear-gradient(135deg, #0a0a0a 0%, #141414 100%)\",\r\n        }}\r\n      >\r\n        <div className=\"section-container\">\r\n          <div className=\"section-header\">\r\n            <h1>WHO'S RESPONSIBLE</h1>\r\n            <div className=\"section-number\">04</div>\r\n          </div>\r\n          <div className=\"text-container\">\r\n            <TextFrame>\r\n              <p>\r\n                Cleaning space isn't just about technology but also about\r\n                <b className=\"highlight\"> accountability</b>: legal frameworks\r\n                and international agreements have started to address who is\r\n                responsible for debris in orbit.\r\n              </p>\r\n              <p>\r\n                As early as 1971, the United Nations established that{\" \"}\r\n                <b className=\"highlight\">\r\n                  countries are responsible for any object they launch into\r\n                  space\r\n                </b>\r\n                , including any damage it may cause.\r\n              </p>\r\n            </TextFrame>\r\n\r\n            <TextFrame>\r\n              <p>\r\n                In 2017, the{\" \"}\r\n                <b className=\"highlight\">European Space Agency (ESA) </b>\r\n                introduced a policy requiring satellites to be designed so they\r\n                can either re-enter Earth's atmosphere safely or be moved to a\r\n                distant \"graveyard orbit\" at the end of their life.\r\n              </p>\r\n              <p>\r\n                In 2023, space agencies around the world agreed on\r\n                new guidelines mandating that inactive{\" \"}\r\n                <b className=\"highlight\">\r\n                  satellites must be removed from orbit within five years\r\n                </b>\r\n                . These policies mark real progress but there's still a long way\r\n                to go in building a truly sustainable future in space.\r\n              </p>\r\n            </TextFrame>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <div ref={footerRef}>\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Context;","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["gsap","registerPlugin","ScrollToPlugin","ScrollTrigger","Observer","TextFrame","_ref","children","ref","inView","useInView","threshold","triggerOnce","_jsx","className","Context","sectionsRef","useRef","footerRef","currentIndex","activeIndex","setActiveIndex","useState","isLoading","setIsLoading","isMobile","setIsMobile","isScrolling","setIsScrolling","contentRef","titleImageLoaded","setTitleImageLoaded","scrollToSection","index","target","current","length","window","scrollTo","top","offsetTop","behavior","to","y","autoKill","offsetY","duration","ease","onComplete","useEffect","checkIfMobile","innerWidth","addEventListener","setVh","vh","innerHeight","document","documentElement","style","setProperty","timer","setTimeout","clearTimeout","removeEventListener","handleScroll","scrollPosition","scrollY","newActiveIndex","forEach","section","sectionTop","sectionHeight","offsetHeight","sections","observer","create","type","onDown","body","onUp","wheelSpeed","tolerance","preventDefault","i","trigger","start","end","onEnter","onEnterBack","kill","getAll","instance","killTweensOf","st","LoadingScreen","_jsxs","map","onClick","el","src","process","alt","background","Footer","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","undefined","fallbackInView","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","elements","thresholds","entries","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","delay","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","entryTarget","previousEntryTarget","result"],"sourceRoot":""}