{"version":3,"file":"static/js/954.053634cd.chunk.js","mappings":"iSAEMA,EAAc,IAAIC,IASlBC,EAA+C,IAAIC,QACrDC,EAAS,EAETC,OAAwC,EA6BrC,SAASC,EAAYC,GAC1B,OAAOC,OAAOC,KAAKF,GAChBG,OACAC,OACEC,QAA2D,IAAnDL,EAAQK,IAElBC,IAAKD,IACJ,MAAO,GAAGA,KACA,SAARA,GArBWE,EAsBGP,EAAQO,KArBvBA,GACDZ,EAAQa,IAAID,KAChBV,GAAU,EACVF,EAAQc,IAAIF,EAAMV,EAAOa,aAFKf,EAAQgB,IAAIJ,IADxB,KAsBRP,EAAQK,KAvBpB,IAAmBE,IA0BdG,UACL,CA4DO,SAASE,EACdC,EACAC,GAGA,IAFAd,EAAAe,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAoC,CAAC,EACrCG,EAAAH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAiBjB,EAEjB,GACyC,qBAAhCqB,OAAOC,2BACK,IAAnBF,EACA,CACA,MAAMG,EAASR,EAAQS,wBAWvB,OAVAR,EAASI,EAAgB,CACvBK,eAAgBL,EAChBM,OAAQX,EACRY,kBAC+B,kBAAtBzB,EAAQ0B,UAAyB1B,EAAQ0B,UAAY,EAC9DC,KAAM,EACNC,mBAAoBP,EACpBQ,iBAAkBR,EAClBS,WAAYT,IAEP,MAGT,CAEA,MAAM,GAAEU,EAAA,SAAIC,EAAA,SAAUC,GApFxB,SAAwBjC,GAEtB,MAAM+B,EAAKhC,EAAYC,GACvB,IAAIkC,EAAWzC,EAAYkB,IAAIoB,GAE/B,IAAKG,EAAU,CAEb,MAAMD,EAAW,IAAIvC,IAErB,IAAIyC,EAEJ,MAAMH,EAAW,IAAIZ,qBAAsBgB,IACzCA,EAAQC,QAASC,IAvEvB,IAAAC,EA0EQ,MAAMC,EACJF,EAAMf,gBACNY,EAAWM,KAAMf,GAAcY,EAAMb,mBAAqBC,GAGxD1B,EAAQ0C,iBAA8C,qBAApBJ,EAAMK,YAG1CL,EAAMK,UAAYH,GAGpB,OAAAD,EAAAN,EAAStB,IAAI2B,EAAMd,UAAnBe,EAA4BF,QAASvB,IACnCA,EAAS0B,EAAQF,QAGpBtC,GAGHmC,EACEH,EAASG,aACRS,MAAMC,QAAQ7C,EAAQ0B,WACnB1B,EAAQ0B,UACR,CAAC1B,EAAQ0B,WAAa,IAE5BQ,EAAW,CACTH,KACAC,WACAC,YAGFxC,EAAYgB,IAAIsB,EAAIG,EACtB,CAEA,OAAOA,CACT,CAmCqCY,CAAe9C,GAG5C+C,EAAYd,EAAStB,IAAIE,IAAY,GAQ3C,OAPKoB,EAASzB,IAAIK,IAChBoB,EAASxB,IAAII,EAASkC,GAGxBA,EAAUC,KAAKlC,GACfkB,EAASpB,QAAQC,GAEV,WAELkC,EAAUE,OAAOF,EAAUG,QAAQpC,GAAW,GAErB,IAArBiC,EAAU/B,SAEZiB,EAASkB,OAAOtC,GAChBmB,EAASoB,UAAUvC,IAGC,IAAlBoB,EAASoB,OAEXrB,EAASsB,aACT7D,EAAY0D,OAAOpB,GAEvB,CACF,CC1GkCwB,EAAAA,UC7B3B,SAASC,IAWiC,IAXvB,UACxB9B,EAAA,MACA+B,EAAA,gBACAf,EAAA,WACAgB,EAAAnD,KACAA,EAAA,YACAoD,EAAA,KACAC,EAAA,cACAC,EAAA,eACA3C,EAAA,SACA4C,GACF/C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAyB,CAAC,EA9C1B,IAAAwB,EA+CE,MAAOwB,EAAKC,GAAgBC,EAAAA,SAAyB,MAC/CnD,EAAiBmD,EAAAA,OAAwCH,IACxDI,EAAOC,GAAkBF,EAAAA,SAAgB,CAC9CzB,SAAUqB,EACVvB,WAAO,IAKTxB,EAASsD,QAAUN,EAGbG,EAAAA,UACJ,KAEE,GAAIL,IAASG,EAAK,OAElB,IAAIX,EA4BJ,OA3BAA,EAAYxC,EACVmD,EACA,CAACvB,EAAQF,KACP6B,EAAS,CACP3B,SACAF,UAEExB,EAASsD,SAAStD,EAASsD,QAAQ5B,EAAQF,GAE3CA,EAAMf,gBAAkBoC,GAAeP,IAEzCA,IACAA,OAAY,IAGhB,CACE7C,OACAmD,aACAhC,YAEAgB,kBAEAe,SAEFvC,GAGK,KACDkC,GACFA,MAMN,CAEER,MAAMC,QAAQnB,GAAaA,EAAUhB,WAAagB,EAClDqC,EACAxD,EACAmD,EACAC,EACAC,EACAlB,EACAxB,EACAuC,IAIJ,MAAMY,EAAc,OAAA9B,EAAA2B,EAAM5B,YAAN,EAAAC,EAAaf,OAC3B8C,EAA4BL,EAAAA,YAA4B,GAE3DF,IACDM,GACCV,GACAC,GACDU,EAAoBF,UAAYC,IAIhCC,EAAoBF,QAAUC,EAC9BF,EAAS,CACP3B,SAAUqB,EACVvB,WAAO,KAIX,MAAMiC,EAAS,CAACP,EAAQE,EAAM1B,OAAQ0B,EAAM5B,OAO5C,OAJAiC,EAAOR,IAAMQ,EAAO,GACpBA,EAAO/B,OAAS+B,EAAO,GACvBA,EAAOjC,MAAQiC,EAAO,GAEfA,CACT,C,0ICnIA,MAAMC,EAAYC,IAAmB,IAAlB,SAAEC,GAAUD,EAC7B,MAAOV,EAAKvB,IAAUgB,EAAAA,EAAAA,IAAU,CAC9B9B,UAAW,GACXiC,aAAa,IAGf,OACEgB,EAAAA,EAAAA,KAAA,OAAKZ,IAAKA,EAAKa,UAAW,eAAcpC,EAAS,aAAe,IAAKkC,SAClEA,KAmXP,EA9WgBG,KACd,MAAMC,GAAcC,EAAAA,EAAAA,QAAO,IACrBC,GAAYD,EAAAA,EAAAA,QAAO,MACnBE,GAAeF,EAAAA,EAAAA,QAAO,IACrBG,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IACxCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAUC,IAAeJ,EAAAA,EAAAA,WAAS,IAClCK,EAAaC,IAAkBN,EAAAA,EAAAA,WAAS,GAEzCO,EAAmBC,IACvB,GAAIH,EAAa,OACjBC,GAAe,GAEf,MAAMlE,EACJoE,EAAQd,EAAYV,QAAQpD,OACxB8D,EAAYV,QAAQwB,GACpBZ,EAAUZ,QAEX5C,IAED+D,GAEFpE,OAAO0E,SAAS,CACdC,IAAKtE,EAAOuE,UACZC,SAAU,WAEZf,EAAab,QAAUwB,EACvBT,EAAeS,GACfF,GAAe,IAEfO,EAAAA,GAAKC,GAAG/E,OAAQ,CACd0E,SAAU,CAAEM,EAAG3E,EAAQ4E,UAAU,EAAOC,QAAS,GACjDC,SAAU,IACVC,KAAM,aACNC,WAAYA,KACVvB,EAAab,QAAUwB,EACvBT,EAAeS,GACfF,GAAe,QAkIvB,OA5HAe,EAAAA,EAAAA,WAAU,KAER,MAAMC,EAAgBA,KACpBlB,EAAYrE,OAAOwF,YAAc,MAGnCD,IACAvF,OAAOyF,iBAAiB,SAAUF,GAGlC,MAAMG,EAAQA,KACZ,MAAMC,EAA0B,IAArB3F,OAAO4F,YAClBC,SAASC,gBAAgBC,MAAMC,YAAY,OAAQ,GAAGL,QAExDD,IACA1F,OAAOyF,iBAAiB,SAAUC,GAGlC,MAAMO,EAAQC,WAAW,IAAM/B,GAAa,GAAQ,KAEpD,MAAO,KACLgC,aAAaF,GACbjG,OAAOoG,oBAAoB,SAAUb,GACrCvF,OAAOoG,oBAAoB,SAAUV,KAEtC,KAEHJ,EAAAA,EAAAA,WAAU,KACR,IAAKpB,EAAW,CACd,GAAKE,EA0DE,CAEL,MAAMiC,EAAeA,KACnB,MAAMC,EAAiBtG,OAAOuG,QAC9B,IAAIC,EAAiB,EAErB7C,EAAYV,QAAQ/B,QAAQ,CAACuF,EAAShC,KACpC,GAAIgC,EAAS,CACX,MAAMC,EAAaD,EAAQ7B,UACrB+B,EAAgBF,EAAQG,aAE5BN,GAAkBI,EAAa1G,OAAO4F,YAAc,GACpDU,EACEI,EAAaC,EAAgB3G,OAAO4F,YAAc,IAEpDY,EAAiB/B,EAErB,IAGFT,EAAewC,GACf1C,EAAab,QAAUuD,GAIzB,OADAxG,OAAOyF,iBAAiB,SAAUY,GAC3B,IAAMrG,OAAOoG,oBAAoB,SAAUC,EACpD,CApFe,CAEb,MAAMQ,EAAWlD,EAAYV,QAEvBpC,EAAWiG,EAAAA,GAASC,OAAO,CAC/B1G,OAAQL,OACRgH,KAAM,cACNC,OAAQA,OAEJjH,OAAO4F,YAAc5F,OAAOuG,SAC5BV,SAASqB,KAAKN,aAAe,MACd9C,EAAab,QAAU4D,EAAShH,QAC/C2E,EAAgBV,EAAab,QAAU,IAG3CkE,KAAMA,KACArD,EAAab,QAAU,GACzBuB,EAAgBV,EAAab,QAAU,IAG3CmE,WAAY,EACZC,UAAW,GACXC,gBAAgB,IAgClB,OA7BAT,EAAS3F,QAAQ,CAACuF,EAASc,KACzBC,EAAAA,EAAcT,OAAO,CACnBU,QAAShB,EACTiB,MAAO,aACPC,IAAK,gBACLC,QAASA,KACP5D,EAAeuD,GACfzD,EAAab,QAAUsE,GAEzBM,YAAaA,KACX7D,EAAeuD,GACfzD,EAAab,QAAUsE,OAK7BC,EAAAA,EAAcT,OAAO,CACnBU,QAAS5D,EAAUZ,QACnByE,MAAO,kBACPE,QAASA,KACP5D,EAAe6C,EAAShH,QACxBiE,EAAab,QAAU4D,EAAShH,QAElCgI,YAAaA,KACX7D,EAAe6C,EAAShH,OAAS,GACjCiE,EAAab,QAAU4D,EAAShH,OAAS,KAItC,KACLgB,EAASiH,OACTN,EAAAA,EAAcO,SAAS7G,QAASH,GAAaA,EAAS+G,QAE1D,CA2BF,GACC,CAAC5D,EAAWE,KAEfkB,EAAAA,EAAAA,WAAU,IACD,KACLR,EAAAA,GAAKkD,aAAahI,QAClBwH,EAAAA,EAAcO,SAAS7G,QAAS+G,GAAOA,EAAGH,SAE3C,IAEC5D,GAAkBV,EAAAA,EAAAA,KAAC0E,EAAAA,EAAa,KAGlCC,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,MAAKF,SAAA,EAClBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASF,SACrB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGpE,IAAKoI,IACvB/D,EAAAA,EAAAA,KAAA,UAEEC,UAAW,QAAOM,IAAgBwD,EAAI,SAAW,IACjDa,QAASA,IAAM5D,EAAgB+C,GAC/B,aAAY,iBAAiBA,EAAI,IAAIhE,UAErCC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eALX8D,OAUXY,EAAAA,EAAAA,MAAA,WACE1E,UAAU,eACVb,IAAMyF,GAAQ1E,EAAYV,QAAQ,GAAKoF,EAAI9E,SAAA,EAE3C4E,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,eAAcF,SAAA,EAC3B4E,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,aAAYF,SAAA,EACzBC,EAAAA,EAAAA,KAAA,OACE8E,IAAKC,yBACL9E,UAAU,YACV+E,IAAI,2BAENL,EAAAA,EAAAA,MAAA,MAAI1E,UAAU,aAAYF,SAAA,EACxBC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcF,SAAC,mBAAqB,KAACC,EAAAA,EAAAA,KAAA,SAAM,kBAI/DA,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeF,SAAC,8GAK/B4E,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,gBAAgB2E,QAASA,IAAM5D,EAAgB,GAAGjB,SAAA,EAC/DC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uBACHC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAGnBD,EAAAA,EAAAA,KAAA,WACEC,UAAU,kBACVb,IAAMyF,GAAQ1E,EAAYV,QAAQ,GAAKoF,EAAI9E,UAE3C4E,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,oBAAmBF,SAAA,EAChC4E,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,iBAAgBF,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gCACJC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBF,SAAC,WAElC4E,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,iBAAgBF,SAAA,EAC7BC,EAAAA,EAAAA,KAACH,EAAS,CAAAE,UACR4E,EAAAA,EAAAA,MAAA,KAAA5E,SAAA,CAAG,+CAC4C,KAC7CC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,wDAErB,8IAMRC,EAAAA,EAAAA,KAACH,EAAS,CAAAE,UACR4E,EAAAA,EAAAA,MAAA,KAAA5E,SAAA,CAAG,8GAEgD,KACjDC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,0FAGrB,oHAQdC,EAAAA,EAAAA,KAAA,WACEC,UAAU,kBACVb,IAAMyF,GAAQ1E,EAAYV,QAAQ,GAAKoF,EAAI9E,UAE3C4E,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,oBAAmBF,SAAA,EAChC4E,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,iBAAgBF,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yBACJC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBF,SAAC,WAElC4E,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,iBAAgBF,SAAA,EAC7B4E,EAAAA,EAAAA,MAAC9E,EAAS,CAAAE,SAAA,EACR4E,EAAAA,EAAAA,MAAA,KAAA5E,SAAA,CAAG,0BACuB,KACxBC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,qBAAqB,gIAIhD4E,EAAAA,EAAAA,MAAA,KAAA5E,SAAA,CAAG,2CACwC,KACzCC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,qBAAoB,4DAKjD4E,EAAAA,EAAAA,MAAC9E,EAAS,CAAAE,SAAA,EACR4E,EAAAA,EAAAA,MAAA,KAAA5E,SAAA,CAAG,6FAEyB,KAC1BC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,mCAAkC,QAE7DC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,mKAUXC,EAAAA,EAAAA,KAAA,WACEC,UAAU,kBACVb,IAAMyF,GAAQ1E,EAAYV,QAAQ,GAAKoF,EAAI9E,UAE3C4E,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,oBAAmBF,SAAA,EAChC4E,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,iBAAgBF,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+BACJC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBF,SAAC,WAElC4E,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,iBAAgBF,SAAA,EAC7BC,EAAAA,EAAAA,KAACH,EAAS,CAAAE,UACR4E,EAAAA,EAAAA,MAAA,KAAA5E,SAAA,CAAG,kFAEaC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,qBAAoB,oJAM/DC,EAAAA,EAAAA,KAACH,EAAS,CAAAE,UACR4E,EAAAA,EAAAA,MAAA,KAAA5E,SAAA,CAAG,2FAGDC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,UAAU,KACnCC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,iBAAiB,IAAC,KAC3CC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,UAAS,iCAA+B,KACjEC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,YAAW,mCAEpCC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,sBAAsB,KAC/CC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,mBAAkB,mIAQrDC,EAAAA,EAAAA,KAAA,WACEC,UAAU,kBACVb,IAAMyF,GAAQ1E,EAAYV,QAAQ,GAAKoF,EAAI9E,UAE3C4E,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,oBAAmBF,SAAA,EAChC4E,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,iBAAgBF,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBACJC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBF,SAAC,WAElCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBF,UAC7B4E,EAAAA,EAAAA,MAAC9E,EAAS,CAAAE,SAAA,EACR4E,EAAAA,EAAAA,MAAA,KAAA5E,SAAA,CAAG,gIAGM,QAGTC,EAAAA,EAAAA,KAAA,KAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,YAAWF,SAAC,8HAK3B4E,EAAAA,EAAAA,MAAA,OAAK1E,UAAU,oBAAmBF,SAAA,EAChCC,EAAAA,EAAAA,KAACiF,EAAAA,GAAI,CAAChF,UAAU,UAAUsB,GAAG,YAAWxB,SAAC,cAGzCC,EAAAA,EAAAA,KAACiF,EAAAA,GAAI,CAAChF,UAAU,UAAUsB,GAAG,YAAWxB,SAAC,6BASnDC,EAAAA,EAAAA,KAAA,OAAKZ,IAAKiB,EAAUN,UAClBC,EAAAA,EAAAA,KAACkF,EAAAA,EAAM,S","sources":["../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx","pages/Project.js"],"sourcesContent":["import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { gsap } from \"gsap\";\r\nimport { ScrollTrigger, Observer } from \"gsap/all\";\r\nimport \"../App.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport LoadingScreen from \"./components/LoadingScreen\";\r\nimport Footer from \"./components/Footer\";\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nconst TextFrame = ({ children }) => {\r\n  const [ref, inView] = useInView({\r\n    threshold: 0.1,\r\n    triggerOnce: true,\r\n  });\r\n\r\n  return (\r\n    <div ref={ref} className={`text-frame ${inView ? \"animate-in\" : \"\"}`}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Project = () => {\r\n  const sectionsRef = useRef([]);\r\n  const footerRef = useRef(null);\r\n  const currentIndex = useRef(0);\r\n  const [activeIndex, setActiveIndex] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const [isScrolling, setIsScrolling] = useState(false);\r\n\r\n  const scrollToSection = (index) => {\r\n    if (isScrolling) return;\r\n    setIsScrolling(true);\r\n\r\n    const target =\r\n      index < sectionsRef.current.length\r\n        ? sectionsRef.current[index]\r\n        : footerRef.current;\r\n\r\n    if (!target) return;\r\n\r\n    if (isMobile) {\r\n      // Simple scroll for mobile\r\n      window.scrollTo({\r\n        top: target.offsetTop,\r\n        behavior: \"smooth\",\r\n      });\r\n      currentIndex.current = index;\r\n      setActiveIndex(index);\r\n      setIsScrolling(false);\r\n    } else {\r\n      gsap.to(window, {\r\n        scrollTo: { y: target, autoKill: false, offsetY: 0 },\r\n        duration: 1.2,\r\n        ease: \"power3.out\",\r\n        onComplete: () => {\r\n          currentIndex.current = index;\r\n          setActiveIndex(index);\r\n          setIsScrolling(false);\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if mobile\r\n    const checkIfMobile = () => {\r\n      setIsMobile(window.innerWidth <= 768);\r\n    };\r\n\r\n    checkIfMobile();\r\n    window.addEventListener(\"resize\", checkIfMobile);\r\n\r\n    // Set proper viewport height for mobile\r\n    const setVh = () => {\r\n      const vh = window.innerHeight * 0.01;\r\n      document.documentElement.style.setProperty(\"--vh\", `${vh}px`);\r\n    };\r\n    setVh();\r\n    window.addEventListener(\"resize\", setVh);\r\n\r\n    // Loading timeout\r\n    const timer = setTimeout(() => setIsLoading(false), 1000);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n      window.removeEventListener(\"resize\", checkIfMobile);\r\n      window.removeEventListener(\"resize\", setVh);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isLoading) {\r\n      if (!isMobile) {\r\n        // Desktop setup with GSAP\r\n        const sections = sectionsRef.current;\r\n\r\n        const observer = Observer.create({\r\n          target: window,\r\n          type: \"wheel,touch\",\r\n          onDown: () => {\r\n            const atFooter =\r\n              window.innerHeight + window.scrollY >=\r\n              document.body.offsetHeight - 100;\r\n            if (!atFooter && currentIndex.current < sections.length) {\r\n              scrollToSection(currentIndex.current + 1);\r\n            }\r\n          },\r\n          onUp: () => {\r\n            if (currentIndex.current > 0) {\r\n              scrollToSection(currentIndex.current - 1);\r\n            }\r\n          },\r\n          wheelSpeed: 1,\r\n          tolerance: 15,\r\n          preventDefault: true,\r\n        });\r\n\r\n        sections.forEach((section, i) => {\r\n          ScrollTrigger.create({\r\n            trigger: section,\r\n            start: \"top center\",\r\n            end: \"bottom center\",\r\n            onEnter: () => {\r\n              setActiveIndex(i);\r\n              currentIndex.current = i;\r\n            },\r\n            onEnterBack: () => {\r\n              setActiveIndex(i);\r\n              currentIndex.current = i;\r\n            },\r\n          });\r\n        });\r\n\r\n        ScrollTrigger.create({\r\n          trigger: footerRef.current,\r\n          start: \"top bottom-=100\",\r\n          onEnter: () => {\r\n            setActiveIndex(sections.length);\r\n            currentIndex.current = sections.length;\r\n          },\r\n          onEnterBack: () => {\r\n            setActiveIndex(sections.length - 1);\r\n            currentIndex.current = sections.length - 1;\r\n          },\r\n        });\r\n\r\n        return () => {\r\n          observer.kill();\r\n          ScrollTrigger.getAll().forEach((instance) => instance.kill());\r\n        };\r\n      } else {\r\n        // Mobile setup - simple scroll listener\r\n        const handleScroll = () => {\r\n          const scrollPosition = window.scrollY;\r\n          let newActiveIndex = 0;\r\n\r\n          sectionsRef.current.forEach((section, index) => {\r\n            if (section) {\r\n              const sectionTop = section.offsetTop;\r\n              const sectionHeight = section.offsetHeight;\r\n              if (\r\n                scrollPosition >= sectionTop - window.innerHeight / 2 &&\r\n                scrollPosition <\r\n                  sectionTop + sectionHeight - window.innerHeight / 2\r\n              ) {\r\n                newActiveIndex = index;\r\n              }\r\n            }\r\n          });\r\n\r\n          setActiveIndex(newActiveIndex);\r\n          currentIndex.current = newActiveIndex;\r\n        };\r\n\r\n        window.addEventListener(\"scroll\", handleScroll);\r\n        return () => window.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    }\r\n  }, [isLoading, isMobile]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      gsap.killTweensOf(window);\r\n      ScrollTrigger.getAll().forEach((st) => st.kill());\r\n    };\r\n  }, []);\r\n\r\n  if (isLoading) return <LoadingScreen />;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"dot-nav\">\r\n        {[0, 1, 2, 3, 4, 5].map((i) => (\r\n          <button\r\n            key={i}\r\n            className={`dot ${activeIndex === i ? \"active\" : \"\"}`}\r\n            onClick={() => scrollToSection(i)}\r\n            aria-label={`Go to section ${i + 1}`}\r\n          >\r\n            <span className=\"dot-label\"></span>\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <section\r\n        className=\"hero-section\"\r\n        ref={(el) => (sectionsRef.current[0] = el)}\r\n      >\r\n        <div className=\"hero-content\">\r\n          <div className=\"title-deco\">\r\n            <img\r\n              src={process.env.PUBLIC_URL + \"/title.svg\"}\r\n              className=\"title-img\"\r\n              alt=\"The Sea Above Project\"\r\n            />\r\n            <h1 className=\"hero-title\">\r\n              <span className=\"title-accent\">THE SEA ABOVE:</span> <br />\r\n              The Data\r\n            </h1>\r\n          </div>\r\n          <p className=\"hero-subtitle\">\r\n            Visualizations powered by cleaned data from two sources on\r\n            Earth-orbiting satellites and space debris\r\n          </p>\r\n        </div>\r\n        <div className=\"scroll-prompt\" onClick={() => scrollToSection(1)}>\r\n          <p>Scroll to explore</p>\r\n          <div className=\"scroll-arrow\"></div>\r\n        </div>\r\n      </section>\r\n      <section\r\n        className=\"content-section\"\r\n        ref={(el) => (sectionsRef.current[1] = el)}\r\n      >\r\n        <div className=\"section-container\">\r\n          <div className=\"section-header\">\r\n            <h1>Neuraspace's Space Objects</h1>\r\n            <div className=\"section-number\">03</div>\r\n          </div>\r\n          <div className=\"text-container\">\r\n            <TextFrame>\r\n              <p>\r\n                This is an internal dataset from Neuraspace,{\" \"}\r\n                <b className=\"highlight\">\r\n                  a company focused on satellite collision prevention\r\n                </b>\r\n                . It provides detailed, structured information about space\r\n                objects, including their purpose, operational status, and\r\n                technical specs.\r\n              </p>\r\n            </TextFrame>\r\n            <TextFrame>\r\n              <p>\r\n                The dataset from Neuraspace offers detailed and structured\r\n                information about each space object. It includes{\" \"}\r\n                <b className=\"highlight\">\r\n                  official names and unique identifiers, along with\r\n                  classifications by type and subtype\r\n                </b>\r\n                . Additionally, it records the country of origin and indicates\r\n                whether each object is still active.\r\n              </p>\r\n            </TextFrame>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <section\r\n        className=\"content-section\"\r\n        ref={(el) => (sectionsRef.current[2] = el)}\r\n      >\r\n        <div className=\"section-container\">\r\n          <div className=\"section-header\">\r\n            <h1>Space Decay Dataset</h1>\r\n            <div className=\"section-number\">02</div>\r\n          </div>\r\n          <div className=\"text-container\">\r\n            <TextFrame>\r\n              <p>\r\n                This dataset comes from{\" \"}\r\n                <b className=\"highlight\"> space-track.org</b>, a trusted source\r\n                for tracking objects in space. It includes data on active\r\n                satellites, inactive ones, and space debris.\r\n              </p>\r\n              <p>\r\n                The Space Decay dataset was collected by{\" \"}\r\n                <b className=\"highlight\">KANDHAL KHANDEKA</b> using the public\r\n                API provided by space-track.org.\r\n              </p>\r\n            </TextFrame>\r\n\r\n            <TextFrame>\r\n              <p>\r\n                It contains a broad range of information about objects currently\r\n                in orbit, including their{\" \"}\r\n                <b className=\"highlight\">names, types, and launch years</b>.\r\n              </p>\r\n              <p>\r\n                Originally, the dataset was designed for exploratory data\r\n                analysis, making it well-suited for identifying patterns and\r\n                trends in orbital activity.\r\n              </p>\r\n            </TextFrame>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section\r\n        className=\"content-section\"\r\n        ref={(el) => (sectionsRef.current[3] = el)}\r\n      >\r\n        <div className=\"section-container\">\r\n          <div className=\"section-header\">\r\n            <h1>How We Processed the Data</h1>\r\n            <div className=\"section-number\">04</div>\r\n          </div>\r\n          <div className=\"text-container\">\r\n            <TextFrame>\r\n              <p>\r\n                To make the information easier to work with and visualize, both\r\n                datasets were <b className=\"highlight\">carefully merged</b> into\r\n                a single, unified structure. During this process, duplicate\r\n                entries were identified and removed by cross-referencing the two\r\n                sources.\r\n              </p>\r\n            </TextFrame>\r\n            <TextFrame>\r\n              <p>\r\n                The data was then cleaned and standardized by organizing it into\r\n                seven core categories:\r\n                <b className=\"highlight\"> name</b>,\r\n                <b className=\"highlight\"> launch year</b>,{\" \"}\r\n                <b className=\"highlight\">type </b>(such as satellite or debris),{\" \"}\r\n                <b className=\"highlight\">subtype</b> (like payload or rocket\r\n                body),\r\n                <b className=\"highlight\">country of origin</b>,\r\n                <b className=\"highlight\"> an identifier</b> (using the COSPAR\r\n                ID), and finally, the source of the data — whether it came from\r\n                Space Decay or Neuraspace.\r\n              </p>\r\n            </TextFrame>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <section\r\n        className=\"content-section\"\r\n        ref={(el) => (sectionsRef.current[4] = el)}\r\n      >\r\n        <div className=\"section-container\">\r\n          <div className=\"section-header\">\r\n            <h1>Why It Matters</h1>\r\n            <div className=\"section-number\">05</div>\r\n          </div>\r\n          <div className=\"text-container\">\r\n            <TextFrame>\r\n              <p>\r\n                Combining and cleaning these datasets helped paint a more\r\n                complete and accurate picture of what's happening in Earth's\r\n                orbit.{\" \"}\r\n              </p>\r\n\r\n              <p>\r\n                <b className=\"highlight\">\r\n                  The better we understand what's up there, the better we can\r\n                  protect satellites, avoid collisions, and keep space safe.\r\n                </b>\r\n              </p>\r\n              <div className=\"buttons-container\">\r\n                <Link className=\"buttons\" to=\"/timeline\">\r\n                  Timeline\r\n                </Link>\r\n                <Link className=\"buttons\" to=\"/timeline\">\r\n                  Space Hunt\r\n                </Link>\r\n              </div>\r\n            </TextFrame>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <div ref={footerRef}>\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Project;\r\n"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","useInView","delay","rootMargin","triggerOnce","skip","initialInView","onChange","ref","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result","TextFrame","_ref","children","_jsx","className","Project","sectionsRef","useRef","footerRef","currentIndex","activeIndex","setActiveIndex","useState","isLoading","setIsLoading","isMobile","setIsMobile","isScrolling","setIsScrolling","scrollToSection","index","scrollTo","top","offsetTop","behavior","gsap","to","y","autoKill","offsetY","duration","ease","onComplete","useEffect","checkIfMobile","innerWidth","addEventListener","setVh","vh","innerHeight","document","documentElement","style","setProperty","timer","setTimeout","clearTimeout","removeEventListener","handleScroll","scrollPosition","scrollY","newActiveIndex","section","sectionTop","sectionHeight","offsetHeight","sections","Observer","create","type","onDown","body","onUp","wheelSpeed","tolerance","preventDefault","i","ScrollTrigger","trigger","start","end","onEnter","onEnterBack","kill","getAll","killTweensOf","st","LoadingScreen","_jsxs","onClick","el","src","process","alt","Link","Footer"],"sourceRoot":""}