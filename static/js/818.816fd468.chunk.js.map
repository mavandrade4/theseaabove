{"version":3,"file":"static/js/818.816fd468.chunk.js","mappings":"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","sources":["pages/About.js","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"../App.css\";\r\nimport { gsap } from \"gsap\";\r\nimport { ScrollToPlugin, ScrollTrigger, Observer } from \"gsap/all\";\r\nimport LoadingScreen from \"./components/LoadingScreen\";\r\nimport Footer from \"./components/Footer\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nconst TextFrame = ({ children }) => {\r\n  const [ref, inView] = useInView({\r\n    threshold: 0.1,\r\n    triggerOnce: true,\r\n  });\r\n\r\n  return (\r\n    <div ref={ref} className={`text-frame ${inView ? \"animate-in\" : \"\"}`}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\ngsap.registerPlugin(ScrollToPlugin, ScrollTrigger, Observer);\r\n\r\nconst About = () => {\r\n  const sectionsRef = useRef([]);\r\n  const footerRef = useRef(null);\r\n  const currentIndex = useRef(0);\r\n  const [activeIndex, setActiveIndex] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const [isScrolling, setIsScrolling] = useState(false);\r\n\r\n  const scrollToSection = (index) => {\r\n    if (isScrolling) return;\r\n    setIsScrolling(true);\r\n\r\n    const target =\r\n      index < sectionsRef.current.length\r\n        ? sectionsRef.current[index]\r\n        : footerRef.current;\r\n\r\n    if (!target) return;\r\n\r\n    if (isMobile) {\r\n      window.scrollTo({\r\n        top: target.offsetTop,\r\n        behavior: \"smooth\",\r\n      });\r\n      currentIndex.current = index;\r\n      setActiveIndex(index);\r\n      setIsScrolling(false);\r\n    } else {\r\n      gsap.to(window, {\r\n        scrollTo: { y: target, autoKill: false, offsetY: 0 },\r\n        duration: 1.2,\r\n        ease: \"power3.out\",\r\n        onComplete: () => {\r\n          currentIndex.current = index;\r\n          setActiveIndex(index);\r\n          setIsScrolling(false);\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const checkIfMobile = () => {\r\n      setIsMobile(window.innerWidth <= 768);\r\n    };\r\n\r\n    checkIfMobile();\r\n    window.addEventListener(\"resize\", checkIfMobile);\r\n\r\n    const setVh = () => {\r\n      const vh = window.innerHeight * 0.01;\r\n      document.documentElement.style.setProperty(\"--vh\", `${vh}px`);\r\n    };\r\n    setVh();\r\n    window.addEventListener(\"resize\", setVh);\r\n\r\n    const timer = setTimeout(() => setIsLoading(false), 1000);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n      window.removeEventListener(\"resize\", checkIfMobile);\r\n      window.removeEventListener(\"resize\", setVh);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isLoading) {\r\n      if (!isMobile) {\r\n        const sections = sectionsRef.current;\r\n\r\n        const observer = Observer.create({\r\n          target: window,\r\n          type: \"wheel,touch\",\r\n          onDown: () => {\r\n            const atFooter =\r\n              window.innerHeight + window.scrollY >=\r\n              document.body.offsetHeight - 100;\r\n            if (!atFooter && currentIndex.current < sections.length) {\r\n              scrollToSection(currentIndex.current + 1);\r\n            }\r\n          },\r\n          onUp: () => {\r\n            if (currentIndex.current > 0) {\r\n              scrollToSection(currentIndex.current - 1);\r\n            }\r\n          },\r\n          wheelSpeed: 1,\r\n          tolerance: 15,\r\n          preventDefault: true,\r\n        });\r\n\r\n        sections.forEach((section, i) => {\r\n          ScrollTrigger.create({\r\n            trigger: section,\r\n            start: \"top center\",\r\n            end: \"bottom center\",\r\n            onEnter: () => {\r\n              setActiveIndex(i);\r\n              currentIndex.current = i;\r\n            },\r\n            onEnterBack: () => {\r\n              setActiveIndex(i);\r\n              currentIndex.current = i;\r\n            },\r\n          });\r\n        });\r\n\r\n        ScrollTrigger.create({\r\n          trigger: footerRef.current,\r\n          start: \"top bottom-=100\",\r\n          onEnter: () => {\r\n            setActiveIndex(sections.length);\r\n            currentIndex.current = sections.length;\r\n          },\r\n          onEnterBack: () => {\r\n            setActiveIndex(sections.length - 1);\r\n            currentIndex.current = sections.length - 1;\r\n          },\r\n        });\r\n\r\n        return () => {\r\n          observer.kill();\r\n          ScrollTrigger.getAll().forEach((instance) => instance.kill());\r\n        };\r\n      } else {\r\n        const handleScroll = () => {\r\n          const scrollPosition = window.scrollY;\r\n          let newActiveIndex = 0;\r\n\r\n          sectionsRef.current.forEach((section, index) => {\r\n            if (section) {\r\n              const sectionTop = section.offsetTop;\r\n              const sectionHeight = section.offsetHeight;\r\n              if (\r\n                scrollPosition >= sectionTop - window.innerHeight / 2 &&\r\n                scrollPosition <\r\n                  sectionTop + sectionHeight - window.innerHeight / 2\r\n              ) {\r\n                newActiveIndex = index;\r\n              }\r\n            }\r\n          });\r\n\r\n          setActiveIndex(newActiveIndex);\r\n          currentIndex.current = newActiveIndex;\r\n        };\r\n\r\n        window.addEventListener(\"scroll\", handleScroll);\r\n        return () => window.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    }\r\n  }, [isLoading, isMobile]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      gsap.killTweensOf(window);\r\n      ScrollTrigger.getAll().forEach((st) => st.kill());\r\n    };\r\n  }, []);\r\n\r\n  if (isLoading) return <LoadingScreen />;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"dot-nav\">\r\n        {[0, 1, 2, 3].map((i) => (\r\n          <button\r\n            key={i}\r\n            className={`dot ${activeIndex === i ? \"active\" : \"\"}`}\r\n            onClick={() => scrollToSection(i)}\r\n            aria-label={`Go to section ${i + 1}`}\r\n          >\r\n            <span className=\"dot-label\"></span>\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <section\r\n        className=\"hero-section\"\r\n        ref={(el) => (sectionsRef.current[0] = el)}\r\n      >\r\n        <div className=\"hero-content\">\r\n          <div className=\"title-deco\">\r\n            <img\r\n              src={process.env.PUBLIC_URL + \"/title.svg\"}\r\n              className=\"title-img\"\r\n              alt=\"About Us\"\r\n            />\r\n            <h1 className=\"hero-title\">\r\n              <span className=\"title-accent\">ABOUT US:</span> <br />\r\n              Making Space Make Sense\r\n            </h1>\r\n          </div>\r\n          <p className=\"hero-subtitle\">\r\n            The team behind the project and our mission to understand space\r\n            debris\r\n          </p>\r\n        </div>\r\n        <div className=\"scroll-prompt\" onClick={() => scrollToSection(1)}>\r\n          <p>Scroll to explore</p>\r\n          <div className=\"scroll-arrow\"></div>\r\n        </div>\r\n      </section>\r\n      <section\r\n        className=\"content-section\"\r\n        ref={(el) => (sectionsRef.current[1] = el)}\r\n      >\r\n        <div className=\"section-container\">\r\n          <div className=\"section-header\">\r\n            <h1>NEURASPACE</h1>\r\n            <div className=\"section-number\">01</div>\r\n          </div>\r\n          <div className=\"text-container\">\r\n            <TextFrame>\r\n              <p>\r\n                Neuraspace is addressing one of the biggest challenges in modern\r\n                space exploration:{\" \"}\r\n                <b className=\"highlight\">\r\n                  avoiding collisions and reducing space debris\r\n                </b>\r\n                .\r\n              </p>\r\n              <p>\r\n                By leveraging machine learning models to track and predict the\r\n                movement of objects in low Earth orbit, Neuraspace allows\r\n                satellite operators to make{\" \"}\r\n                <b className=\"highlight\">faster, smarter decisions</b> before\r\n                accidents occur.\r\n              </p>\r\n            </TextFrame>\r\n\r\n            <TextFrame>\r\n              <p>\r\n                Fewer false alarms and faster responses mean{\" \"}\r\n                <b className=\"highlight\">\r\n                  fewer unnecessary alerts and quicker decision-making , saving\r\n                  fuel, time, and money.\r\n                </b>\r\n              </p>\r\n              <p>\r\n                The <b className=\"highlight\">AI Fights Space Debris</b> project\r\n                supports this mission by integrating Neuraspace's tools into a\r\n                powerful Space Traffic Management (STM) platform which helps\r\n                extend the life of satellites and reduce operational costs.\r\n              </p>\r\n            </TextFrame>\r\n            <img\r\n              src={process.env.PUBLIC_URL + \"/neura.png\"}\r\n              className=\"section-image\"\r\n              alt=\"Neuraspace Logo\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section\r\n        className=\"content-section\"\r\n        ref={(el) => (sectionsRef.current[2] = el)}\r\n      >\r\n        <div className=\"section-container\">\r\n          <div className=\"section-header\">\r\n            <h1>CISUC/UC</h1>\r\n            <div className=\"section-number\">02</div>\r\n          </div>\r\n          <div className=\"text-container\">\r\n            <TextFrame>\r\n              <p>\r\n                The Centre for Informatics and Systems of the University of\r\n                Coimbra (CISUC) is one of Portugal's leading research\r\n                institutions in computer science and information technology.\r\n                Founded in 1991, CISUC brings together a team of over 280\r\n                researchers — including professors, postdocs, and PhD students —\r\n                working on innovative projects in areas such as\r\n                <b className=\"highlight\">\r\n                  {\" \"}\r\n                  artificial intelligence, software engineering, and data\r\n                  science\r\n                </b>\r\n                .\r\n              </p>\r\n            </TextFrame>\r\n            <TextFrame>\r\n              <p>CISUC's mission is to:</p>\r\n              <ul>\r\n                <li>Drive original research and development</li>\r\n                <li>Train the next generation of tech talent</li>\r\n                <li>\r\n                  Collaborate on cutting-edge national and international\r\n                  projects\r\n                </li>\r\n                <li>Bridge the gap between academia and industry</li>\r\n              </ul>\r\n            </TextFrame>\r\n\r\n            <img\r\n              src={process.env.PUBLIC_URL + \"/cisuc.png\"}\r\n              className=\"section-image\"\r\n              alt=\"CISUC Logo\"\r\n              style={{\r\n                maxWidth: \"50vh\",\r\n                objectFit: \"contain\",\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section\r\n        className=\"content-section\"\r\n        ref={(el) => (sectionsRef.current[3] = el)}\r\n      >\r\n        <div className=\"section-container\">\r\n          <div className=\"section-header\">\r\n            <div className=\"section-number\">03</div>\r\n            <h1>ABOUT ME</h1>\r\n          </div>\r\n          <div className=\"text-container\">\r\n            <TextFrame>\r\n              <p>\r\n                Hi! I'm Mariana, I'm 26, and I have a background in <b className=\"highlight\">Computer\r\n                Engineering</b>. Right now, I'm working on my <b className=\"highlight\">Master's in Design and\r\n                Multimedia</b> at the University of Coimbra.\r\n              </p>\r\n\r\n              <p>\r\n                This project brings together both sides of my experience -\r\n                technology and creativity - to raise awareness about space\r\n                sustainability and show how design can help solve real-world\r\n                problems.\r\n              </p>\r\n              <Link className=\"buttons\" to=\"/context\">\r\n                View Project\r\n              </Link>\r\n            </TextFrame>\r\n            <img\r\n              src={process.env.PUBLIC_URL + \"/eu.png\"}\r\n              className=\"section-image\"\r\n              alt=\"Mariana\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <div ref={footerRef}>\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["TextFrame","_ref","children","ref","inView","useInView","threshold","triggerOnce","_jsx","className","gsap","registerPlugin","ScrollToPlugin","ScrollTrigger","Observer","About","sectionsRef","useRef","footerRef","currentIndex","activeIndex","setActiveIndex","useState","isLoading","setIsLoading","isMobile","setIsMobile","isScrolling","setIsScrolling","scrollToSection","index","target","current","length","window","scrollTo","top","offsetTop","behavior","to","y","autoKill","offsetY","duration","ease","onComplete","useEffect","checkIfMobile","innerWidth","addEventListener","setVh","vh","innerHeight","document","documentElement","style","setProperty","timer","setTimeout","clearTimeout","removeEventListener","handleScroll","scrollPosition","scrollY","newActiveIndex","forEach","section","sectionTop","sectionHeight","offsetHeight","sections","observer","create","type","onDown","body","onUp","wheelSpeed","tolerance","preventDefault","i","trigger","start","end","onEnter","onEnterBack","kill","getAll","instance","killTweensOf","st","LoadingScreen","_jsxs","map","onClick","el","src","process","alt","maxWidth","objectFit","Link","Footer","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","undefined","fallbackInView","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","elements","thresholds","entries","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","delay","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","entryTarget","previousEntryTarget","result"],"sourceRoot":""}